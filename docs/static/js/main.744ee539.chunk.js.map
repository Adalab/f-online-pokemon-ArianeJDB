{"version":3,"sources":["card/PokeCard.js","list/List.js","filters/FilterName.js","App.js","services/pokeFetch.js","serviceWorker.js","index.js"],"names":["PokeCard","react_default","a","createElement","className","src","this","props","image","alt","concat","name","id","types","map","type","React","Component","List","_this","pokemon","filter","item","toLocaleLowerCase","includes","filterName","card_PokeCard","sprites","front_default","FilterName","onChange","handleFilterName","placeholder","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","getPokemon","bind","assertThisInitialized","_this2","fetch","then","res","json","data","results","url","moreData","pokeState","push","sort","b","setState","e","value","currentTarget","Fragment","filters_FilterName","list_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.744ee539.chunk.js","sourcesContent":["import React from 'react';\nimport './pokecard.css'\n\nclass PokeCard extends React.Component {\n  render() {\n    return (\n      <div className=\"card_container\">\n        <div className=\"grey_container\">\n          <img src={this.props.image} alt={`Imagen de ${this.props.name}`}  className=\"card_image\" />\n          <p className=\"id\">{`ID: ${this.props.id}`}</p>\n        </div>\n        <div className=\"white_container\">\n          <h2 className=\"card_name\">{this.props.name}</h2>\n          <ul className=\"types_list\">\n            {this.props.types\n                  .map(type => {\n                    return (\n                      <li className=\"type_item\">\n                        <div className=\"tags\">{type.type.name}</div>\n                      </li>\n                    );\n                  })}\n              </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PokeCard;","import React from 'react';\nimport PokeCard from '../card/PokeCard';\nimport './list.css'\n\nclass List extends React.Component {\n  render() {\n    return(\n      <ul className=\"poke_list\">\n       {this.props.pokemon\n        .filter(item =>item.name.toLocaleLowerCase().includes(this.props.filterName))\n        .map(item => {\n          return (\n            <li className=\"poke_item\">\n              <PokeCard \n                name={item.name}\n                image={item.sprites.front_default}\n                types={item.types}\n                id={item.id}\n                />\n          </li>);\n        })}\n      </ul>\n    );\n  }\n}\n\nexport default List;\n\n\n// {this.props.pokemon \n//   .map(item => {\n//     return (\n//       <li>\n//         <h2>{item.name}</h2>\n//         <img src={item.sprites.front_default} alt={`Foto de ${item.name}`} />\n//         <ul>\n//           {item.types\n//             .map(item => {\n//               return(\n//                 <li>{item}</li>\n//               )\n//         </ul>\n//       </li>\n//     )\n//   })}\n","import React from 'react';\nimport './filtername.css'\n;class FilterName extends React.Component {\n  render() {\n    return (\n      <div className=\"search_container\">\n      <input\n            className=\"search\"\n            name=\"search\"\n            type=\"text\"\n            onChange={this.props.handleFilterName}\n            placeholder=\"Find a pokemon by name\"\n      />\n      </div>\n    );\n  }\n}\n\nexport default FilterName;","import React from 'react';\nimport List from './list/List';\nimport FilterName from './filters/FilterName';\nimport './App.css';\nimport {fetchPokemon} from './services/pokeFetch';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pokemon: [],\n      filterName: ''\n    }\n    this.getPokemon = this.getPokemon.bind(this);\n    this.handleFilterName = this.handleFilterName.bind(this);\n  }\n  componentDidMount(){\n    this.getPokemon();\n  }\n  getPokemon() {\n    fetchPokemon()\n      .then(data => {\n        data.results.map(item => {\n          return (\n            fetch(item.url)\n              .then(res => res.json())\n              .then(moreData => {\n                const pokeState = this.state.pokemon;\n                pokeState.push(moreData);\n                pokeState.sort((a, b) => a.id - b.id);\n                this.setState({\n                  pokemon: pokeState\n              })\n            })\n          )\n        })\n      })\n  }\n\n  handleFilterName(e) {\n    const value = e.currentTarget.value;\n    this.setState({\n      filterName: value\n    })\n  }\n  render() {\n    return (\n      <React.Fragment>\n      <FilterName \n        handleFilterName={this.handleFilterName}\n        filterName={this.state.filterName}\n      />\n      <List \n      pokemon={this.state.pokemon}\n      handleFilterName={this.handleFilterName}\n      filterName={this.state.filterName}\n\n      />\n      </React.Fragment>\n      );\n  }\n}\n\nexport default App;\n","const ENDPOINT = 'https://pokeapi.co/api/v2/pokemon?=25&limit=25';\n\nconst fetchPokemon = () => fetch(ENDPOINT)\n  .then(res => res.json())\n\n  export {fetchPokemon};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}